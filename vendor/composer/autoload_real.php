<?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit591f4d4910a902ad6f72c35a8198ed6a
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }
//当我们实例化ClassLoader时，会调用ComposerAutoloaderInit591f4d4910a902ad6f72c35a8198ed6a下的loadClassLoader方法
        spl_autoload_register(array('ComposerAutoloaderInit591f4d4910a902ad6f72c35a8198ed6a', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
//        解除注册函数
        spl_autoload_unregister(array('ComposerAutoloaderInit591f4d4910a902ad6f72c35a8198ed6a', 'loadClassLoader'));
        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            require_once __DIR__ . '/autoload_static.php';
//        调用ComposerStaticInit591f4d4910a902ad6f72c35a8198ed6a的方法getInitializer，他会返回一个闭包函数，然后call_user_func直接执行，给$loader添加几个属性
            call_user_func(\Composer\Autoload\ComposerStaticInit591f4d4910a902ad6f72c35a8198ed6a::getInitializer($loader));
        } else {
//            添加配置
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }
        $loader->register(true);
        if ($useStaticLoader) {
            $includeFiles = Composer\Autoload\ComposerStaticInit591f4d4910a902ad6f72c35a8198ed6a::$files;
        } else {
            $includeFiles = require __DIR__ . '/autoload_files.php';
        }
//        在引入这些文件的同时，把这些配置添加到$GLOBALS超全局变量中
        foreach ($includeFiles as $fileIdentifier => $file) {
            composerRequire591f4d4910a902ad6f72c35a8198ed6a($fileIdentifier, $file);
        }
        return $loader;
    }
}

function composerRequire591f4d4910a902ad6f72c35a8198ed6a($fileIdentifier, $file)
{
    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
        require $file;

        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
    }
}
